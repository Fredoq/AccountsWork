//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------


using System.ComponentModel.DataAnnotations;
using System.Diagnostics.CodeAnalysis;

namespace AccountsWork.DomainModel
{
    using System;
    using System.Collections.Generic;
    using Infrastructure;

    public partial class AccountsMainSet : ValidatableBindableBase
    {
        private int _id;
        private string _accountNumber;
        private string _accountCompany;
        private DateTime _accountDate;
        private decimal? _accountAmount;
        private string _accountDescription;
        private string _accountMcdType;
        private int _accountYear;
        private string _accountType;

        [SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public AccountsMainSet()
        {
            this.AccountsBudgetDetailsSets = new HashSet<AccountsBudgetDetailsSet>();
            this.AccountsCapexInfoSets = new HashSet<AccountsCapexInfoSet>();
            this.AccountsStatusDetailsSets = new HashSet<AccountsStatusDetailsSet>();
            this.AccountsStoreDetailsSets = new HashSet<AccountsStoreDetailsSet>();
            this.StoreProvenWorkSets = new HashSet<StoreProvenWorkSet>();
        }

        [Required]
        public int Id
        {
            get { return _id; }
            set { SetProperty(ref _id, value); }
        }

        [CustomValidation(typeof(AccountsMainSet), "CheckAccountNumber")]
        public string AccountNumber
        {
            get { return _accountNumber; }
            set { SetProperty(ref _accountNumber, value); }
        }

        [CustomValidation(typeof(AccountsMainSet), "CheckAccountCompany")]
        public string AccountCompany
        {
            get { return _accountCompany; }
            set { SetProperty(ref _accountCompany, value); }
        }

        [CustomValidation(typeof(AccountsMainSet), "CheckDateRange")]
        public DateTime AccountDate
        {
            get { return _accountDate; }
            set { SetProperty(ref _accountDate, value); }
        }

        [Required]
        public decimal? AccountAmount
        {
            get { return _accountAmount; }
            set { SetProperty(ref _accountAmount, value); }
        }

        public string AccountDescription
        {
            get { return _accountDescription; }
            set { SetProperty(ref _accountDescription, value); }
        }

        [CustomValidation(typeof(AccountsMainSet), "CheckAccountMcdType")]
        public string AccountMcdType
        {
            get { return _accountMcdType; }
            set { SetProperty(ref _accountMcdType, value); }
        }

        [CustomValidation(typeof(AccountsMainSet), "CheckYearRange")]
        public int AccountYear
        {
            get { return _accountYear; }
            set { SetProperty(ref _accountYear, value); }
        }

        [CustomValidation(typeof(AccountsMainSet), "CheckAccountType")]
        public string AccountType
        {
            get { return _accountType; }
            set { SetProperty(ref _accountType, value); }
        }

        [SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<AccountsBudgetDetailsSet> AccountsBudgetDetailsSets { get; set; }
        [SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<AccountsCapexInfoSet> AccountsCapexInfoSets { get; set; }
        [SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<AccountsStatusDetailsSet> AccountsStatusDetailsSets { get; set; }
        [SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<AccountsStoreDetailsSet> AccountsStoreDetailsSets { get; set; }
        [SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<StoreProvenWorkSet> StoreProvenWorkSets { get; set; }

        #region Validation Methods

        public static ValidationResult CheckAccountNumber(string number, ValidationContext context)
        {
            if (string.IsNullOrWhiteSpace(number))
                return new ValidationResult("Не указан номер счета");
            return ValidationResult.Success;
        }
        public static ValidationResult CheckAccountCompany(string company, ValidationContext context)
        {
            if (string.IsNullOrWhiteSpace(company))
                return new ValidationResult("Не выбрана компания-поставщик");
            return ValidationResult.Success;
        }
        public static ValidationResult CheckAccountMcdType(string company, ValidationContext context)
        {
            if (string.IsNullOrWhiteSpace(company))
                return new ValidationResult("Не выбрана компания-получатель");
            return ValidationResult.Success;
        }
        public static ValidationResult CheckAccountType(string accType, ValidationContext context)
        {
            if (string.IsNullOrWhiteSpace(accType))
                return new ValidationResult("Не выбран тип счета");
            return ValidationResult.Success;
        }
        public static ValidationResult CheckDateRange(DateTime? date, ValidationContext context)
        {
            if (date.Value < new DateTime(2013, 1, 1) || date.Value > DateTime.Now)
                return new ValidationResult("Указана неверная дата счета");
            return ValidationResult.Success;
        }
        public static ValidationResult CheckYearRange(int year, ValidationContext context)
        {
            if (year < DateTime.Now.Year - 1 && DateTime.Now.Month >= 3 || year > DateTime.Now.Year && DateTime.Now.Month <= 9)
                return new ValidationResult("Внести данные за указынный год бюджета невозможно");
            return ValidationResult.Success;
        }
        #endregion Validation Methods  
    }
}
